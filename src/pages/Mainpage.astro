<script>
  import Konva from "konva";
  import { createPost } from './drawer';

  const containerEl = document.getElementById("container");
  const containerWidth = containerEl.clientWidth;
  const containerHeight = containerEl.clientHeight;
  let boardX = containerWidth * 0.1; // Starting X coordinate
  let boardY = containerHeight * 0.2; // Starting Y coordinate
  var currentAngle = 0; // Starting angle in degrees

  // Initialize stage and layer
  var stage = new Konva.Stage({
    container: "container",
    width: containerWidth,
    height: containerHeight,
  });

  var deckLayer = new Konva.Layer();
  var drawerLayer = new Konva.Layer();
  stage.add(drawerLayer);
  stage.add(deckLayer);

  // sidebar x
  var sidebarX = containerEl.clientWidth * 0.8;

  var line = new Konva.Line({
    points: [boardX, boardY],
    stroke: "black",
    strokeWidth: 8,
    strokeEnabled: true,
    fillEnabled: true,
    shadowEnabled: true,
    shadowForStrokeEnabled: true,
    shadowOpacity: 1,
    shadowOffsetX: 1,
    shadowOffsetY: 1,
    shadowColor: "gray",
    lineCap: "round",
    lineJoin: "round",
    /*
     * line segments with a length of 29px with a gap
     * of 20px followed by a line segment of 0.001px (a dot)
     * followed by a gap of 20px
     */
    // dash: [29, 20, 0.001, 20],
  });
  deckLayer.add(line);

  createPost(sidebarX, boardY, drawerLayer);

  function drawDeck() {
    console.log(containerWidth * 0.1, containerHeight * 0.2);
    console.log(boardX, boardY);
    // Reset Line
    line.points([boardX, boardY]);
    currentAngle = 0;

    try {
      const inputStr = (
        document.getElementById("inputData") as HTMLInputElement
      ).value;
      var values = inputStr.split(",").map((value) => value.trim());

      for (var i = 0; i < values.length; i += 2) {
        var angle = parseFloat(values[i]);
        var length = parseFloat(values[i + 1]);

        // Convert angle to Radians
        var angleRadians = ((currentAngle + angle) * Math.PI) / 180;

        // Calculate new endpoint coordinates
        var newX = boardX + length * Math.cos(angleRadians);
        var newY = boardY + length * Math.sin(angleRadians);

        line.points([...line.points(), newX, newY]);

        // Update current position and angle for the next segment
        boardX = newX;
        boardY = newY;
        currentAngle += angle;
      }

      line.draw();
    } catch (e) {
      alert(e);
    }
  }

  const button = document.getElementById("draw-button");
  button.addEventListener("click", (e) => {
    e.preventDefault();
    drawDeck();
  });
</script>

<style>
  canvas {
    border: 2px solid black;
  }
</style>

<div id="container" class="w-full h-full"></div>
